import { getOAS } from './config.js'
import { promises as fs } from 'fs'
import { deepStrictEqual } from 'assert';

let spec = await getOAS();

let componentSchemas = {
    '$schema': 'http://json-schema.org/draft-07/schema#',
    title: 'Amplify Central',
    oneOf: [],
    components: {
        schemas: spec.components.schemas
    }
};

// Need to 'fix' them
for (let schemaKey in componentSchemas.components.schemas) {
    const schema = componentSchemas.components.schemas[schemaKey];
    if (!schema['x-axway-kind']) {
        continue;
    }

    schema.properties.apiVersion.enum = [schema.properties.apiVersion.default];
    schema.properties.apiVersion.default = undefined;
    schema.properties.apiVersion.readOnly = false;
    schema.properties.group.enum = [schema.properties.group.default];
    schema.properties.group.default = undefined;
    schema.properties.group.readOnly = false;
    schema.properties.kind.enum = [schema.properties.kind.default];
    schema.properties.kind.default = undefined;
    schema.properties.kind.readOnly = false;

    schema.required.push('kind', 'apiVersion', 'group');
    if (schema['x-axway-scoped']) {
        schema.required.push('metadata');
    }

    let suffix = '';
    if (schema['x-axway-scoped']) {
        suffix = ' (' + schema['x-axway-scopes'].map(scope => scope.kind)
            .join(" | ") + ')';
    }

    // Blat over metadata to give a better experience
    schema.properties.metadata = undefined;
    if (schema['x-axway-scoped']) {
        schema.properties.metadata = {
            type: 'object',
            description: "Metadata that all server resources have. Data is generated by the server.",
            properties: {
                scope: {
                    type: 'object',
                    description: "The scope where this resource was defined.",
                    properties: {
                        kind: {
                            type: "string",
                            maxLength: 30,
                            description: "The kind of the scope resource where the resource is defined.",
                            enum: schema['x-axway-scopes'].map(s => s.kind)
                        },
                        name: {
                            type: "string",
                            maxLength: 100,
                            pattern: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
                            description: "The name of the scope where the resource is defined."
                        }
                    },
                    required: ['kind', 'name']
                }
            },
            required: ['scope']
        }
    }

    componentSchemas.oneOf.push({
        'title': `${schema['x-axway-kind']}${suffix}`,
        '$ref': `#/components/schemas/${schemaKey}`
    });
}

await fs.writeFile('central.json', JSON.stringify(componentSchemas, null, 4));